# - Find CURLclient
# Find the native CURL includes and library
#
#  CURL_INCLUDES    - where to find CURL.h, etc.
#  CURL_LIBRARIES   - List of libraries when using CURL.
#  CURL_FOUND       - True if CURL found.

# Silent mode ?
IF (CURL_INCLUDE_DIR AND CURL_LIBRARY)
  # Already in cache, be silent
  SET(CURL_FIND_QUIETLY TRUE)
ENDIF (CURL_INCLUDE_DIR AND CURL_LIBRARY)

# Find include dir
FIND_PATH(CURL_INCLUDE_DIR curl/curl.h
  /usr/local/include/CURL
  /usr/include/CURL
)

# Find library
SET(CURL_NAMES curl)
FIND_LIBRARY(CURL_LIBRARY
  NAMES ${CURL_NAMES}
  PATHS /usr/lib /usr/local/lib
  PATH_SUFFIXES CURL
)

# Set variables
IF (CURL_INCLUDE_DIR AND CURL_LIBRARY)
  SET(CURL_FOUND TRUE)
  SET(CURL_LIBRARIES ${CURL_LIBRARY})
  SET(CURL_INCLUDES ${CURL_INCLUDE_DIR})
ELSE (CURL_INCLUDE_DIR AND CURL_LIBRARY)
  SET(CURL_FOUND FALSE)
  SET(CURL_LIBRARIES)
  SET(CURL_INCLUDES)
ENDIF (CURL_INCLUDE_DIR AND CURL_LIBRARY)

# Report
IF (CURL_FOUND)
  IF (NOT CURL_FIND_QUIETLY)
    MESSAGE(STATUS "Found CURL: ${CURL_LIBRARY}")
    MESSAGE(STATUS "CURL include_dir: ${CURL_INCLUDES}")
  ENDIF (NOT CURL_FIND_QUIETLY)
ELSE (CURL_FOUND)
  IF (CURL_FIND_REQUIRED)
    MESSAGE(STATUS "Looked for CURL libraries named ${CURL_NAMES}.")
    MESSAGE(FATAL_ERROR "Could NOT find CURL library")
  ENDIF (CURL_FIND_REQUIRED)
ENDIF (CURL_FOUND)

MARK_AS_ADVANCED(
  CURL_LIBRARY
  CURL_INCLUDE_DIR
)